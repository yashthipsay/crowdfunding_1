const ethers = require("ethers")
const fs = require("fs")

async function main() {
    const provider = new ethers.providers.JsonRpcProvider(
        "http://172.28.240.1:7545"
    )

    const wallet = new ethers.Wallet(
        "7f116f692f7ddf7b256b6d2029577d35ee24377a6e85ae6107907e5e1c6a0a57",
        provider
    )

    const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8")

    const binary = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.bin",
        "utf8"
    )

    //   const contractFactory = new ethers.ContractFactory(abi, binary, wallet);

    //   console.log("Deploying...");

    //   const contract = await contractFactory.deploy();

    const nonce = await wallet.getTransactionCount()
    // This is to get the correct value of nonce

    // We can actually create a transaction manually ourselves by specifying the transaction information
    const tx = {
        nonce: nonce,
        // Nonce is used in transactions to solve difficult problems or used as wallet signature
        gasPrice: 20000000000,
        gasLimit: 6721975,
        to: null,
        value: 0,
        data: "0x608060405234801561001057600080fd5b50610714806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638bab8dd5146100465780639e7a13ad14610076578063bc832d4e146100a7575b600080fd5b610060600480360381019061005b919061036b565b6100c3565b60405161006d91906104cd565b60405180910390f35b610090600480360381019061008b91906103b4565b6100f1565b60405161009e9291906104e8565b60405180910390f35b6100c160048036038101906100bc91906103e1565b6101ad565b005b6000818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6001818154811061010157600080fd5b906000526020600020906002020160009150905080600001549080600101805461012a906105e1565b80601f0160208091040260200160405190810160405280929190818152602001828054610156906105e1565b80156101a35780601f10610178576101008083540402835291602001916101a3565b820191906000526020600020905b81548152906001019060200180831161018657829003601f168201915b5050505050905082565b600060405180604001604052808481526020018381525090506001819080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001019080519060200190610218929190610243565b5050508260008360405161022c91906104b6565b908152602001604051809103902081905550505050565b82805461024f906105e1565b90600052602060002090601f01602090048101928261027157600085556102b8565b82601f1061028a57805160ff19168380011785556102b8565b828001600101855582156102b8579182015b828111156102b757825182559160200191906001019061029c565b5b5090506102c591906102c9565b5090565b5b808211156102e25760008160009055506001016102ca565b5090565b60006102f96102f48461053d565b610518565b905082815260208101848484011115610315576103146106a7565b5b61032084828561059f565b509392505050565b600082601f83011261033d5761033c6106a2565b5b813561034d8482602086016102e6565b91505092915050565b600081359050610365816106c7565b92915050565b600060208284031215610381576103806106b1565b5b600082013567ffffffffffffffff81111561039f5761039e6106ac565b5b6103ab84828501610328565b91505092915050565b6000602082840312156103ca576103c96106b1565b5b60006103d884828501610356565b91505092915050565b600080604083850312156103f8576103f76106b1565b5b600061040685828601610356565b925050602083013567ffffffffffffffff811115610427576104266106ac565b5b61043385828601610328565b9150509250929050565b60006104488261056e565b6104528185610579565b93506104628185602086016105ae565b61046b816106b6565b840191505092915050565b60006104818261056e565b61048b818561058a565b935061049b8185602086016105ae565b80840191505092915050565b6104b081610595565b82525050565b60006104c28284610476565b915081905092915050565b60006020820190506104e260008301846104a7565b92915050565b60006040820190506104fd60008301856104a7565b818103602083015261050f818461043d565b90509392505050565b6000610522610533565b905061052e8282610613565b919050565b6000604051905090565b600067ffffffffffffffff82111561055857610557610673565b5b610561826106b6565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b838110156105cc5780820151818401526020810190506105b1565b838111156105db576000848401525b50505050565b600060028204905060018216806105f957607f821691505b6020821081141561060d5761060c610644565b5b50919050565b61061c826106b6565b810181811067ffffffffffffffff8211171561063b5761063a610673565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6106d081610595565b81146106db57600080fd5b5056fea2646970667358221220c2791d61eedc9e85b1b3fd7a595cdf34bc80213371f2126aef618e55c133bc3b64736f6c63430008070033",
        chainId: 5777,
    }

    const signedTxResponse = await wallet.signTransaction(tx)
    /* The transaction created is just manually typed data.
     It needs to be signed by a wallet, hence this function  */
    console.log(signedTxResponse)

    const sentTxResponse = await wallet.sendTransaction(signedTxResponse)
    await sentTxResponse.wait(1)
    // This is to store a sent response to a blockchain.
    //Response need to be sent after signing it, hence this function
    // We will make sure the transaction is actually sent to the blockchain, hence the await keyword

    console.log(sentTxResponse)
}
